datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  MALE
  FEMALE
}

model Student {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  gender      Gender
  dateOfBirth DateTime
  groupId     String?
  schoolId    String
  archived    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrolments  Enrollment[]
  attendance  Attendance[]
  group       Group?       @relation(fields: [groupId], references: [id])
  school      School       @relation(fields: [schoolId], references: [id])
  note        Note[]

  @@index([groupId])
  @@index([schoolId])
}

model Course {
  id             String          @id @default(uuid())
  name           String
  description    String
  pricePerClass  Float
  totalClasses   Int
  schoolId       String
  archived       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  enrolments     Enrollment[]
  userPerCourses UserPerCourse[]
  classes        Class[]
  school         School          @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

model Enrollment {
  id              String   @id @default(uuid())
  courseId        String
  studentId       String?
  groupId         String?
  teacherId       String
  schoolId        String
  courseGoals     String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  attendedClasses Int
  course          Course   @relation(fields: [courseId], references: [id])
  student         Student? @relation(fields: [studentId], references: [id])
  group           Group?   @relation(fields: [groupId], references: [id])
  teacher         User     @relation(fields: [teacherId], references: [id])
  school          School   @relation(fields: [schoolId], references: [id])

  @@index([courseId])
  @@index([studentId])
  @@index([teacherId])
  @@index([groupId])
  @@index([schoolId])
}

model Group {
  id         String       @id @default(uuid())
  name       String
  schoolId   String
  archived   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  students   Student[]
  school     School       @relation(fields: [schoolId], references: [id])
  enrolments Enrollment[]
  note       Note[]

  @@index([schoolId])
}

model User {
  id              String          @id @default(uuid())
  firstName       String
  lastName        String
  email           String          @unique
  hashedPassword  String
  phone           String
  gender          Gender
  dateOfBirth     DateTime
  roleId          String
  schoolId        String
  archived        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            Role            @relation(fields: [roleId], references: [id])
  school          School          @relation(fields: [schoolId], references: [id])
  classOriginal   Class[]         @relation("originalTeacher")
  classSubstitute Class[]         @relation("substituteTeacher")
  userPerCourses  UserPerCourse[]
  enrolments      Enrollment[]
  note            Note[]
  color           UserColor?

  @@index([roleId])
  @@index([schoolId])
}

model Role {
  id    String @id @default(uuid())
  type  String
  users User[]
}

// implicit many to many ?!
model UserPerCourse {
  id       String  @id @default(uuid())
  courseId String
  userId   String
  course   Course? @relation(fields: [courseId], references: [id])
  user     User?   @relation(fields: [userId], references: [id])

  @@index([courseId])
  @@index([userId])
}

model Class {
  id                  String       @id @default(uuid())
  courseId            String
  originalTeacherId   String
  substituteTeacherId String?
  classroomId         String
  classStatus         String
  classType           String
  attendeeId          String
  start               DateTime
  end                 DateTime
  duration            String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  course              Course       @relation(fields: [courseId], references: [id])
  classroom           Classroom    @relation(fields: [classroomId], references: [id])
  originalTeacher     User         @relation(fields: [originalTeacherId], references: [id], name: "originalTeacher")
  substituteTeacher   User?        @relation(fields: [substituteTeacherId], references: [id], name: "substituteTeacher")
  attendance          Attendance[]

  @@index([courseId])
  @@index([substituteTeacherId])
  @@index([originalTeacherId])
  @@index([classroomId])
}

model Attendance {
  classId   String
  studentId String
  attended  Boolean
  class     Class   @relation(fields: [classId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@id([classId, studentId])
  @@index([classId])
  @@index([studentId])
}

model School {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  groups      Group[]
  students    Student[]
  users       User[]
  courses     Course[]
  enrollments Enrollment[]
  classrooms  Classroom[]
  colors      UserColor[]
}

model Note {
  id           String   @id @default(uuid())
  enrollmentId String
  teacherId    String
  // Student or Group Id
  userId       String
  text         String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  teacher      User     @relation(fields: [teacherId], references: [id])
  student      Student? @relation(fields: [userId], references: [id], map: "Note_Student_fkey")
  group        Group?   @relation(fields: [userId], references: [id], map: "Note_Group_fkey")

  @@index([teacherId])
  @@index([userId])
}

model Exam {
  id           String   @id @default(uuid())
  name         String?
  result       String?
  comment      String?
  enrollmentId String
  studentId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Classroom {
  id       String  @id @default(uuid())
  name     String
  schoolId String
  archived Boolean @default(false)
  school   School  @relation(fields: [schoolId], references: [id])
  class    Class[]

  @@index([schoolId])
}

model UserColor {
  id       String @id @default(uuid())
  value    String
  schoolId String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
  school   School @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}
