datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  TEACHER
}

enum ClassStatus {
  SCHEDULED
  HELD
  CANCELED
}

enum ClassType {
  STUDENT
  GROUP
}

model Student {
  id            String           @id @default(uuid())
  firstName     String
  lastName      String
  email         String
  phone         String
  dateOfBirth   DateTime
  // groupId     String?
  schoolId      String
  archived      Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  enrolments    Enrollment[]
  attendance    Attendance[]
  group         StudentToGroup[]
  school        School           @relation(fields: [schoolId], references: [id])
  note          Note[]
  schoolClasses SchoolClass[]

  // @@index([groupId])
  @@index([schoolId])
}

model Course {
  id             String          @id @default(uuid())
  name           String
  description    String
  pricePerClass  Float
  totalClasses   Int
  schoolId       String
  archived       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  enrolments     Enrollment[]
  userPerCourses UserPerCourse[]
  school         School          @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

model Enrollment {
  id              String        @id @default(uuid())
  courseId        String
  studentId       String?
  groupId         String?
  teacherId       String
  schoolId        String
  courseGoals     String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  attendedClasses Int
  course          Course        @relation(fields: [courseId], references: [id])
  student         Student?      @relation(fields: [studentId], references: [id])
  group           Group?        @relation(fields: [groupId], references: [id])
  teacher         User          @relation(fields: [teacherId], references: [id])
  school          School        @relation(fields: [schoolId], references: [id])
  schoolClass     SchoolClass[]

  @@index([courseId])
  @@index([studentId])
  @@index([teacherId])
  @@index([groupId])
  @@index([schoolId])
}

model Group {
  id            String           @id @default(uuid())
  name          String
  schoolId      String
  archived      Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  students      StudentToGroup[]
  school        School           @relation(fields: [schoolId], references: [id])
  enrolments    Enrollment[]
  note          Note[]
  schoolClasses SchoolClass[]

  @@index([schoolId])
}

model StudentToGroup {
  id        String @id @default(uuid())
  studentId String
  groupId   String

  group   Group   @relation(fields: [groupId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@index([groupId])
  @@index([studentId])
}

model User {
  id                    String          @id @default(uuid())
  firstName             String
  lastName              String
  email                 String          @unique
  hashedPassword        String
  phone                 String
  dateOfBirth           DateTime
  schoolId              String
  archived              Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  role                  Role
  school                School          @relation(fields: [schoolId], references: [id])
  schoolClassOriginal   SchoolClass[]   @relation("originalTeacher")
  schoolClassSubstitute SchoolClass[]   @relation("substituteTeacher")
  userPerCourses        UserPerCourse[]
  enrolments            Enrollment[]
  note                  Note[]
  color                 String
  // UserColor             UserColor?

  @@index([schoolId])
}

// implicit many to many ?!
model UserPerCourse {
  id       String  @id @default(uuid())
  courseId String
  userId   String
  course   Course? @relation(fields: [courseId], references: [id])
  user     User?   @relation(fields: [userId], references: [id])

  @@index([courseId])
  @@index([userId])
}

model SchoolClass {
  id                  String       @id @default(uuid())
  enrollmentId        String
  originalTeacherId   String
  substituteTeacherId String?
  classroomId         String
  schoolId            String
  schoolClassStatus   ClassStatus
  groupId             String?
  studentId           String?
  start               DateTime
  end                 DateTime
  duration            String
  description         String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  enrollment          Enrollment   @relation(fields: [enrollmentId], references: [id])
  student             Student?     @relation(fields: [studentId], references: [id])
  group               Group?       @relation(fields: [groupId], references: [id])
  classroom           Classroom    @relation(fields: [classroomId], references: [id])
  originalTeacher     User         @relation(fields: [originalTeacherId], references: [id], name: "originalTeacher")
  substituteTeacher   User?        @relation(fields: [substituteTeacherId], references: [id], name: "substituteTeacher")
  attendance          Attendance[]

  @@index([enrollmentId])
  @@index([substituteTeacherId])
  @@index([originalTeacherId])
  @@index([classroomId])
  @@index([studentId])
  @@index([groupId])
}

model Attendance {
  id            String      @id @default(uuid())
  schoolClassId String
  studentId     String
  attended      Boolean
  schoolId      String
  enrollmentId  String
  schoolClass   SchoolClass @relation(fields: [schoolClassId], references: [id])
  student       Student?    @relation(fields: [studentId], references: [id])
  school        School      @relation(fields: [schoolId], references: [id])

  @@index([schoolClassId])
  @@index([studentId])
  @@index([schoolId])
}

model School {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  groups      Group[]
  students    Student[]
  users       User[]
  courses     Course[]
  enrollments Enrollment[]
  classrooms  Classroom[]
  // colors      UserColor[]
  attendance  Attendance[]
}

model Note {
  id            String   @id @default(uuid())
  enrollmentId  String
  teacherId     String
  schoolClassId String?
  // Student or Group Id
  userId        String
  text          String   @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teacher       User     @relation(fields: [teacherId], references: [id])
  student       Student? @relation(fields: [userId], references: [id], map: "Note_Student_fkey")
  group         Group?   @relation(fields: [userId], references: [id], map: "Note_Group_fkey")

  @@index([teacherId])
  @@index([userId])
}

model Exam {
  id           String   @id @default(uuid())
  name         String?
  result       String?
  comment      String?
  enrollmentId String
  studentId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Classroom {
  id            String        @id @default(uuid())
  name          String
  schoolId      String
  archived      Boolean       @default(false)
  school        School        @relation(fields: [schoolId], references: [id])
  schoolClasses SchoolClass[]

  @@index([schoolId])
}

// model UserColor {
//   id       String @id @default(uuid())
//   value    String
//   schoolId String
//   userId   String @unique
//   user     User   @relation(fields: [userId], references: [id])
//   // school   School @relation(fields: [schoolId], references: [id])

//   @@index([schoolId])
// }

model AssignedColors {
  id        String @id @default(uuid())
  userId    String
  color     String
  schooldId String

  // @@unique([userId, color])
}
